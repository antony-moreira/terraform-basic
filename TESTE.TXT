# MÓDULOS NECESSÁRIO PARA EDIÇÃO DE XML
import os
import json
from lxml import etree

# Acessar a variável de ambiente TARGET_ENVIRONMENT
# env = os.environ.get('ENV')
env = 'HOM'

# Carregar o arquivo JSON
with open('json/rest-config.json', 'r') as json_file:
    data = json.load(json_file)

# Verificar se o ambiente alvo existe no JSON
if env in data:
    # Acessar os valores do ambiente selecionado no JSON
    values = data[env]
    endpoint_uri_template = str(values['ENDPOINT_URI_TEMPLATE'])
    header_template = values['HEADER_TEMPLATE']
    timeout = str(values['TIMEOUT'])
    method = values['METHOD']
    connection_attempts = str(values['CONNECTION_ATTEMPTS'])
    sleep_multiplier = str(values['SLEEP_MULTIPLIER'])
    max_sleep_interval = str(values['MAX_SLEEP_INTERVAL'])

    # Carregar o XML base
    tree = etree.parse('datasource/teste.xml')
    root = tree.getroot()

    # Definir o namespace do XML
    namespace = {
        'default': 'http://com.teste/teste/teste-xmlns',
        'vc': 'http://com.teste/teste/testegdad',
        'xsi': 'http://com.teste/teste/teste-xmlnsdaaw'
    }

    # Acessar os elementos XML e atualizá-los com os valores do ambiente
    job_step_params = root.xpath('//default:job-step-params', namespaces=namespace)[0]
    job_step_params.find('default:endpoint-uri-template', namespaces=namespace).text = endpoint_uri_template
    job_step_params.find('default:header-template', namespaces=namespace).text = header_template
    job_step_params.find('default:timeout', namespaces=namespace).text = timeout
    job_step_params.find('default:method', namespaces=namespace).text = method
    job_step_params.find('default:connection-attempts', namespaces=namespace).text = connection_attempts
    job_step_params.find('default:sleep-multiplier', namespaces=namespace).text = sleep_multiplier
    job_step_params.find('default:max-sleep-interval', namespaces=namespace).text = max_sleep_interval

    # Salvar a edição do arquivo XML
    tree.write('datasource/teste.xml', encoding='utf-8', xml_declaration=True)

    print(f"XML modificado para o ambiente {env} foi salvo com sucesso.")
else:
    print(f"Ambiente {env} não encontrado nas configurações JSON.")
